<script>
      'use strict';
      angular.module("myApp", [])
          .controller("scoreCtrl", function ($scope, $http) {

      var formatMeasures = function(measures, mPerLine=5) {
        var newArray = [];
        for(var x=0;x<measures.length;x++) {
          if(x%mPerLine===0) {
            newArray.push("\n" + measures[x]);
          }
          else {
            newArray.push(measures[x]);
          }
        }
        return newArray.join("|");
      }
      var initialServerData = <%if(score.measures.length) { %> <%- JSON.stringify(score.measures) %> <% } else { %> [] <% } %>;
      var serverMeasures = initialServerData.sort(function(a,b) { return a.measureNumber - b.measureNumber}).map(function(a){ return a.measureValue});

      $scope.tune = {
        // investigate the weird apostrophe stuff (might involve changing %= to %-
        title: '<%=score.name%>',
        tempo: <%=score.tempo%>,
        key:   '<%=score.key%>',
        time:  '<%=score.time%>',
        measures : serverMeasures
      }

      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
      $scope.abcTune2 = "";

      $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{},{});
      console.log($scope.abcTune);
      $scope.measureNumber = 0;
      $scope.measureValue = new String("");
      $scope.selected = "create";
      $scope.songtitles = [];
      $scope.songlinks = [];
      $scope.selectedSong = "";
      $scope.searchText = "";

      io.socket.on('connect', function() {
      io.socket.get('/score/joinRoom/'+<%=score.id%>, function(resData, jwres) {console.log(resData);});
      if (!io.socket.alreadyListeningToMeasures) {
        io.socket.alreadyListeningToMeasures = true;
        io.socket.on('message', function onServerSentEvent (msg) {
    	  console.log(msg);
          // Let's see what the server has to say...
          switch(msg.verb) {

            case 'created':
              $scope.tune.measures.push(msg.measure.measureValue);
              $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              console.log($scope.abcTune);
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{},{});

              // (re-render)
              break;
    		    case 'updated':
    		      $scope.tune.measures[msg.measure[0].measureNumber] = msg.measure[0].measureValue;
    		      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{},{});
    			    // handle update
					console.log($scope.abcTune);
    			    break;
    			  case 'destroyed':
    			    $scope.tune.measures.splice(msg.measureNumber,1);
    			    $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{},{});
			  console.log($scope.abcTune);
    			    break;
            default: return; // ignore any unrecognized messages
          }
        });
      }
    });
      $scope.search = function() {
        // Simple GET request example:
        $http({
          method: 'GET',
          url: '/score/search?title=' + $scope.searchText
        }).then(function successCallback(response) {
          console.log(response);
          $scope.songtitles = response.data.titles;
          $scope.songlinks = response.data.links;
        }, function errorCallback(response) {
        // called asynchronously if an error occurs
        // or server returns response with an error status.
        });
      }
      $scope.selectFromApi = function() {
        var link = $scope.songlinks[$scope.songtitles.indexOf($scope.selectedSong)];
          $http({
            method: 'GET',
            url: '/score/selectFromApi?selected=' + encodeURIComponent(link)
            }).then(function successCallback(response) {
              $scope.abcTune2 = response.data.abc;
              console.log(response);
              ABCJS.renderAbc("music2", $scope.abcTune2,{},{},{});

            });

      }
      $scope.kickoff = function() {
        console.log($scope.selected);
        switch($scope.selected) {
          case "create":
            $scope.create();
            break;
          case "update":
            $scope.update();
            break;
          case "destroy":
            $scope.destroy();
            break;
        }

      }
      $scope.update = function() {
      	io.socket.post('/measure/update', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1, measureValue: $scope.measureValue }, function (resData, jwRes) {
    	  });

      }
      $scope.create = function() {
      	io.socket.post('/measure/create', {owner: <%=score.id%>, measureNumber: $scope.tune.measures.length, measureValue: $scope.measureValue}, function (resData, jwRes) {
      	});
      }
      $scope.destroy = function() {
        io.socket.post('/measure/destroy', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1}, function(resData, jwRes) {
        });
      };
    });
</script>
<div ng-app="myApp" ng-controller="scoreCtrl"</div>
<div id="midi"></div>
<div id="warnings"></div>
<div id="music"></div>
<div id="paper0"></div>
<div id="paper1"></div>
<div id="paper2"></div>
<div id="paper3"></div>
  <div class="form-group">
  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="create">
  <input type="radio" ng-model="selected" name="action" value="create" class="mdl-radio__button" id="create">
  <span class="mdl-radio__label">Create</span>
  </label>
  </div>
  <div class="form-group">
  <label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="update">
  <input type="radio" ng-model="selected" name="action" value="update" class="form-control mdl-radio__button" id="update">
  <span class="mdl-radio__label">Update</span>
</label>
  </div>
  <div class="form-group">
  <label for="destroy">Destroy</label>
  <input type="radio" ng-model="selected" name="action" value="destroy" class="form-control" id="destroy">
  </div>

  <div class="form-group">
  <label for="measureNumber">Measure Number</label>
  <input type="number" ng-disabled="selected==='create'" ng-model="measureNumber" id="measureNumber" class="form-control" required>
  </div>
  <div class="form-group">
  <label for="measureValue">Measure Value</label>
  <input type="text" ng-disabled="selected==='destroy'" ng-model="measureValue" id="measureValue" required>
  </div>
  <button class="btn btn-default" ng-click="kickoff()">Go</button>
  <label for="searchText">Look for inspiration</label>
  <input type="text" id="searchText" ng-model="searchText">
  <button class="btn btn-default" ng-click="search()">Search</button>

  <select ng-model="selectedSong" ng-options="x for x in songtitles">
  </select>
  <input type="submit" ng-click="selectFromApi()">
  <div id="midi2"></div>
  <div id="warnings2"></div>
  <div id="music2"></div>
  <div id="paper02"></div>
  <div id="paper12"></div>
  <div id="paper22"></div>
  <div id="paper32"></div>
</div>
